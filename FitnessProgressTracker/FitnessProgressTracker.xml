<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FitnessProgressTracker</name>
    </assembly>
    <members>
        <member name="T:FitnessProgressTracker.Areas.Identity.IdentityHostingStartup">
            <summary>
            This class is building and runnig the WebServices
            </summary>
        </member>
        <member name="T:FitnessProgressTracker.Controllers.CalculatorModelsController">
            <summary>
            This is the Calculator controller. It's calculating BMI, Body fat mass and lean mass
            </summary>
        </member>
        <member name="F:FitnessProgressTracker.Controllers.CalculatorModelsController._context">
            <summary>
            Creating the DB context
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.#ctor(FitnessProgressTracker.Models.CalculatorContext)">
            <summary>
            The method takes the previously created private context and creates a initialized parameter
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Index">
            <summary>
            This method calls for the Index view from the Calculator
            </summary>
            <returns>View(await _context.CalculatorModel.ToListAsync());</returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Details(System.Nullable{System.Int32})">
            <summary>
            The method calls for the Details view from the Calculator, takes the ID (if found, if not returns "404 /Not found/")
            and gives the 
            </summary>
            <param name="id"></param>
            <returns>
                    if(id - not found) return NotFound();
                    if(id - found ) CalculatorModel calculatorModel = await _context.CalculatorModel.FirstOrDefaultAsync
                    (m => m.ID == id);
            </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Create">
            <summary>
            Calls for the Create page in Calculator View
            </summary>
            <returns> View(); </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Create(FitnessProgressTracker.Models.CalculatorModel)">
            <summary>
            This is the main funciton of the CalculatorModel. Fitst it calls for the Create page in Calculator View. 
            Than it takes some variables (ID,Height,Weight, Waist,Hip,Neck,BodyFatPer,"BodyFatMass,LeanMass") and submits them 
            to the formulas to be calculated;
            Than returns you to the Index page; 
            </summary>
            <param name="calculatorModel"></param>
            <returns> View(calculatorModel) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Edit(System.Nullable{System.Int32})">
            <summary>
            Calls for the Edit page in Calculator View;
            Checks the ID of the database entry and returns the view;
            </summary>
            <param name="id"></param>
            <returns> View(calculatorModel) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Edit(System.Int32,FitnessProgressTracker.Models.CalculatorModel)">
            <summary>
            This method calls for the Edit page of the Calculator view;
            Checks the id of the DB entry and gives the view with the opiton for the user to change the variables
            (ID,Height,Weight,Waist,Hip,Neck,BodyFatPer,BodyFatMass,LeanMass );
            Than it pass the entry back to the DB with the changes and takes the user to the Index page of Calculator View;
            </summary>
            <param name="id"></param>
            <param name="calculatorModel"></param>
            <returns> View(); </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.Delete(System.Nullable{System.Int32})">
            <summary>
            Calls for the Delete page in the Calculator View;
            </summary>
            <param name="id"></param>
            <returns> View(calculatorModel) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.CalculatorModelsController.DeleteConfirmed(System.Int32)">
            <summary>
            Confirmes the Delete function; Checks and Deletes the given ID from the DB
            </summary>
            <param name="id"></param>
            <returns> _context.CalculatorModel.Any(e => e.ID == id) </returns>
        </member>
        <member name="T:FitnessProgressTracker.Controllers.ExerciseTrackerController">
            <summary>
            This is the Exercise Tracker controller;
            </summary>
        </member>
        <member name="F:FitnessProgressTracker.Controllers.ExerciseTrackerController._context">
            <summary>
            Creates the DB context for Exercise Tracker
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.#ctor(FitnessProgressTracker.Models.ExerciseTrackerContext)">
            <summary>
            Initializes the DB context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Index">
            <summary>
            Calls for the Index page of the Exercise Tracker View;
            </summary>
            <returns> View(await _context.Exer_tracker.ToListAsync()) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Details(System.Nullable{System.Int32})">
            <summary>
            Checks if the id of the DB entry is valid;
            if it is calls for the Details view of the Exercise Tracking View;
            if it is not - calls for the Not Found /404/ page;
            </summary>
            <param name="id"></param>
            <returns> View(exer_tracker) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Create">
            <summary>
            Calls for the Create page of the Exercise Tracker View;
            </summary>
            <returns> View(); </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Create(FitnessProgressTracker.Models.Exer_tracker)">
            <summary>
            Main function of this Controller;
            It creates new DB entry with given variables ("ID,DOB,exercise,repeats,load,time_between")
            </summary>
            <param name="exer_tracker"></param>
            <returns> View(exer_tracker); </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Edit(System.Nullable{System.Int32})">
            <summary>
            Calls for the Edit page in Exercise Tra View;
            Checks the ID of the database entry and returns the view;        
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Edit(System.Int32,FitnessProgressTracker.Models.Exer_tracker)">
            <summary>
            This method calls for the Edit page of the Exercise Tracker view;
            Checks the id of the DB entry and gives the view with the opiton for the user to change the variables
            ("ID,DOB,exercise,repeats,load,time_between")
            Than it pass the entry back to the DB with the changes and takes the user to the Index page of Exercise Tracker View; 
            </summary>
            <param name="id"></param>
            <param name="exer_tracker"></param>
            <returns> View(exer_tracker) </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.Delete(System.Nullable{System.Int32})">
            <summary>
            Checks if the id of the db entry is valid
            Than calls for the Delete page of the Exercise Tracker View;
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.ExerciseTrackerController.DeleteConfirmed(System.Int32)">
            <summary>
            This is the Delete function of the Exercise tracker controller; 
            checks if the id of the db entry is valid
            than waits for confirmation form the user
            if confirmation is given - it deletes the db entry
            if not - returns to the Index page
            </summary>
            <param name="id"></param>
            <returns> return _context.Exer_tracker.Any(e => e.ID == id) </returns>
        </member>
        <member name="T:FitnessProgressTracker.Controllers.HomeController">
            <summary>
            Main controller; Calls for the basic pages;
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.HomeController.Index">
            <summary>
            Calls for the Index page of the Main controller;
            </summary>
            <returns> View(); </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.HomeController.About">
            <summary>
            Calls for the About page of the Home View;
            </summary>
            <returns> View with Massage </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.HomeController.Contact">
            <summary>
            Calls for the Contact page of the Home View;
            </summary>
            <returns> View() + Massage </returns>
        </member>
        <member name="M:FitnessProgressTracker.Controllers.HomeController.Error">
            <summary>
            Error handler; 
            </summary>
            <returns> View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier }) </returns>
        </member>
        <member name="T:FitnessProgressTracker.Data.ApplicationDbContext">
            <summary>
            This class is responsible for the initializing of the main DB
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Data.ApplicationDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{FitnessProgressTracker.Data.ApplicationDbContext})">
            <summary>
            Initializes the main db
            </summary>
            <param name="options"></param>
        </member>
        <member name="T:FitnessProgressTracker.Models.CalculatorContext">
            <summary>
            This class is responsible for the creation of the Calculator context
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Models.CalculatorContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{FitnessProgressTracker.Models.CalculatorContext})">
            <summary>
            This is the actual Calculator context
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:FitnessProgressTracker.Models.CalculatorContext.CalculatorModel">
            <summary>
             DB seting of the Model
            </summary>
        </member>
        <member name="T:FitnessProgressTracker.Models.ExerciseTrackerContext">
            <summary>
            The class is responsible for the creation of the ExeciseTrackerContext
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Models.ExerciseTrackerContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{FitnessProgressTracker.Models.ExerciseTrackerContext})">
            <summary>
            This is the actual context
            </summary>
            <param name="options"></param>
        </member>
        <member name="P:FitnessProgressTracker.Models.ExerciseTrackerContext.Exer_tracker">
            <summary>
            DB seting of the Exer_tracker model;
            </summary>
        </member>
        <member name="T:FitnessProgressTracker.Models.CalculatorModel">
            <summary>
            This is the model for the Calculator
            </summary>
        </member>
        <member name="P:FitnessProgressTracker.Models.CalculatorModel.ID">
            <summary>
            initializing the variables for the calculator model
            </summary>
        </member>
        <member name="T:FitnessProgressTracker.Models.ErrorViewModel">
            <summary>
            This is auto-generated....
            </summary>
        </member>
        <member name="T:FitnessProgressTracker.Models.Exer_tracker">
            <summary>
            This is the model for the Exer_tracker functionality
            </summary>
        </member>
        <member name="P:FitnessProgressTracker.Models.Exer_tracker.ID">
            <summary>
            Initializing all variables for the exercise tracker model
            </summary>
        </member>
        <member name="M:FitnessProgressTracker.Program.Main(System.String[])">
            <summary>
            Creating the Web service
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:FitnessProgressTracker.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            some configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:FitnessProgressTracker.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            some login settings
            FB login
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:FitnessProgressTracker.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
